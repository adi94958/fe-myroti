{"version":3,"file":"static/js/110.cd49f3ae.chunk.js","mappings":"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","sources":["views/kurir/KurirPengiriman.js","../node_modules/@coreui/icons/src/free/cil-search.ts"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport {\n  CModal,\n  CModalHeader,\n  CModalBody,\n  CModalFooter,\n  CModalTitle,\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n  CForm,\n  CFormLabel,\n  CFormSelect,\n  CFormInput,\n  CInputGroup,\n  CPagination,\n  CPaginationItem,\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport { cilSearch } from '@coreui/icons'\n\nconst DataPengiriman = () => {\n  const [searchText, setSearchText] = useState('')\n  const [dataRoti, setDataRoti] = useState([])\n  const [visible, setVisible] = useState(false)\n  const [open, setOpen] = useState(false)\n  const [foto, setFoto] = useState(null)\n  const [dataFoto, setDataFoto] = useState([])\n  const [kurir_id, setKurirId] = useState('')\n  const [dataTransaksi, setDataTransaksi] = useState([])\n  const [currentPage, setCurrentPage] = useState(1)\n  const [itemsPerPage, setItemsPerPage] = useState(10)\n  const itemsPerPageOptions = [10, 25, 50, dataTransaksi.length] // Jumlah data per halaman\n\n  useEffect(() => {\n    const infoLogin = JSON.parse(localStorage.getItem('dataLogin'))\n    setKurirId(infoLogin.id)\n    handleData()\n  }, [])\n\n  const handleData = () => {\n    axios\n      .get('https://be-myroti-production.up.railway.app/api/kurir/transaksi')\n      .then((response) => {\n        console.log(response.data)\n        setDataTransaksi(response.data)\n      })\n      .catch((error) => {\n        console.error('Error fetching data:', error)\n      })\n  }\n  const filteredData = dataTransaksi.filter((lapak) => {\n    const lapakName = lapak?.lapak.nama_lapak?.toString()?.toLowerCase() || ''\n    const lapakNameMatch = lapakName.includes(searchText.toLowerCase())\n    const isStatus = lapak?.status !== 'delivered' && lapak?.status !== 'finished'\n    const isKurirMatch = lapak?.id_kurir === kurir_id\n    return lapakNameMatch && isStatus && isKurirMatch\n  })\n\n  const handleRotiClick = (lapak) => {\n    setDataRoti(lapak.transaksi_roti)\n    setVisible(true)\n    console.log(dataTransaksi)\n    console.log(dataRoti)\n  }\n\n  const handleFile = (index) => {\n    const newDataFoto = [...dataFoto]\n    const selectedFile = newDataFoto[index]\n    if (selectedFile) {\n      const reader = new FileReader()\n      reader.onload = (event) => {\n        const dataURL = event.target.result\n        setFoto(dataURL) // Set the data URL as the image source\n        setOpen(true)\n      }\n      reader.readAsDataURL(selectedFile) // Read the file as data URL\n    }\n  }\n\n  const handleFoto = (event, index) => {\n    const selectedFile = event.target.files[0]\n    const newDataFoto = [...dataFoto]\n    newDataFoto[index] = selectedFile\n    setDataFoto(newDataFoto)\n    console.log(newDataFoto)\n  }\n\n  const handleStatus = (lapak) => {\n    axios\n      .put(\n        `https://be-myroti-production.up.railway.app/api/kurir/transaksi/${lapak.id_transaksi}`,\n        {\n          status: 'on delivery',\n        },\n      )\n      .then(() => {\n        handleData()\n      })\n      .catch((error) => {\n        console.error('Error updating status:', error)\n      })\n  }\n  const handleSubmit = (lapak, index) => {\n    const newDataFoto = [...dataFoto]\n    const selectedFile = newDataFoto[index]\n\n    if (selectedFile) {\n      const formData = new FormData()\n      formData.append('bukti_pengiriman', selectedFile)\n      axios\n        .post(\n          `https://be-myroti-production.up.railway.app/api/kurir/transaksi/${lapak.id_transaksi}`,\n          formData,\n        )\n        .then((response) => {\n          console.log('File uploaded successfully', response)\n          setFoto(null)\n          handleData()\n        })\n        .catch((error) => {\n          console.error('Error uploading file:', error)\n        })\n    } else {\n      console.error('No file selected for upload')\n    }\n  }\n\n  const startIndex = (currentPage - 1) * itemsPerPage\n  const endIndex =\n    itemsPerPage === dataTransaksi.length ? dataTransaksi.length : startIndex + itemsPerPage\n  const paginatedData = filteredData.slice(startIndex, endIndex)\n\n  const handleItemsPerPageChange = (value) => {\n    setCurrentPage(1)\n    setItemsPerPage(value)\n  }\n\n  const startRange = startIndex + 1\n  const endRange = Math.min(startIndex + itemsPerPage, filteredData.length)\n  const isDataEmpty = filteredData.length === 0\n\n  return (\n    <div>\n      <CRow>\n        <CCol>\n          <CCard>\n            <CCardHeader>Data Pengiriman Kurir</CCardHeader>\n            <CCardBody>\n              <CForm className=\"mb-3\">\n                <CRow>\n                  <CCol md={8} xs={6}>\n                    <CInputGroup>\n                      <CFormInput\n                        type=\"text\"\n                        placeholder=\"Search...\"\n                        value={searchText}\n                        onChange={(e) => setSearchText(e.target.value)}\n                      />\n                      <CButton variant=\"outline\" className=\"ms-2\">\n                        <CIcon icon={cilSearch} />\n                      </CButton>\n                    </CInputGroup>\n                  </CCol>\n                  <CCol md={2} xs={3}>\n                    <CFormLabel>Rows Per Page:</CFormLabel>\n                  </CCol>\n                  <CCol md={2} xs={3}>\n                    <CFormSelect\n                      className=\"form-select\"\n                      value={itemsPerPage}\n                      onChange={(e) => handleItemsPerPageChange(parseInt(e.target.value))}\n                    >\n                      {itemsPerPageOptions.map((option) => (\n                        <option key={option} value={option}>\n                          {option === dataTransaksi.length ? 'All' : option}\n                        </option>\n                      ))}\n                    </CFormSelect>\n                  </CCol>\n                </CRow>\n              </CForm>\n              <CTable striped bordered responsive>\n                <CTableHead>\n                  <CTableRow>\n                    <CTableHeaderCell>No</CTableHeaderCell>\n                    <CTableHeaderCell>Lapak</CTableHeaderCell>\n                    <CTableHeaderCell>Alamat Lengkap</CTableHeaderCell>\n                    <CTableHeaderCell>Roti</CTableHeaderCell>\n                    <CTableHeaderCell>Bukti Pengiriman</CTableHeaderCell>\n                    <CTableHeaderCell>Status</CTableHeaderCell>\n                    <CTableHeaderCell>Aksi</CTableHeaderCell>\n                  </CTableRow>\n                </CTableHead>\n                <CTableBody>\n                  {paginatedData.length === 0 ? (\n                    <tr>\n                      <td colSpan=\"7\" className=\"text-center\">\n                        Tidak ada data.\n                      </td>\n                    </tr>\n                  ) : (\n                    paginatedData.map((lapak, index) => (\n                      <CTableRow key={index}>\n                        <CTableDataCell>{startIndex + index + 1}</CTableDataCell>\n                        <CTableDataCell>{lapak.lapak.nama_lapak}</CTableDataCell>\n                        <CTableDataCell>{lapak.lapak.alamat_lapak}</CTableDataCell>\n                        <CTableDataCell>\n                          <CButton\n                            color=\"primary\"\n                            variant=\"outline\"\n                            className=\"ms-2\"\n                            title=\"Daftar Roti\"\n                            onClick={() => handleRotiClick(lapak)}\n                          >\n                            <CIcon icon={cilSearch} className=\"mx-12 me-2\" />\n                            Open Detail\n                          </CButton>\n                        </CTableDataCell>\n                        <CTableDataCell>\n                          <div style={{ display: 'flex', alignItems: 'center' }}>\n                            <CFormInput\n                              type=\"file\"\n                              size=\"sm\"\n                              id=\"formFileSm\"\n                              accept=\"image/jpeg, image/jpg, image/png\"\n                              onChange={(e) => handleFoto(e, index)}\n                              disabled={lapak.status === 'ready'}\n                              style={{ width: '60%' }}\n                            />\n                            <CButton\n                              variant=\"outline\"\n                              size=\"sm\"\n                              className=\"mx-2\"\n                              onClick={() => handleFile(index)}\n                              disabled={lapak.status === 'ready'}\n                            >\n                              Lihat\n                            </CButton>\n                            <CButton\n                              variant=\"outline\"\n                              size=\"sm\"\n                              className=\"mx-1\"\n                              onClick={() => handleSubmit(lapak, index)}\n                              disabled={lapak.status === 'ready'}\n                            >\n                              Submit Foto\n                            </CButton>\n                          </div>\n                        </CTableDataCell>\n                        <CTableDataCell\n                          style={{\n                            color:\n                              lapak.status === 'ready'\n                                ? 'green' // Assuming 'ready' status should display green text\n                                : 'red',\n                          }}\n                        >\n                          {lapak.status}\n                        </CTableDataCell>\n                        <CTableDataCell>\n                          <CButton\n                            variant=\"outline\"\n                            onClick={() => handleStatus(lapak)}\n                            disabled={lapak.status === 'on delivery'}\n                          >\n                            Accept\n                          </CButton>\n                        </CTableDataCell>\n                      </CTableRow>\n                    ))\n                  )}\n                </CTableBody>\n              </CTable>\n              <CRow className=\"mt-2 mb-2\">\n                <CCol md={4} xs={8}>\n                  Total Rows: {filteredData.length} Page: {startRange} of {endRange}\n                </CCol>\n              </CRow>\n              <CPagination\n                activepage={currentPage}\n                pages={Math.ceil(filteredData.length / itemsPerPage)}\n                onActivePageChange={setCurrentPage}\n                align=\"center\"\n                doublearrows=\"false\"\n              >\n                <CPaginationItem\n                  onClick={() => !isDataEmpty && setCurrentPage(currentPage - 1)}\n                  disabled={currentPage === 1 || isDataEmpty}\n                  style={{ cursor: isDataEmpty ? 'default' : 'pointer' }}\n                >\n                  Prev\n                </CPaginationItem>\n\n                {Array.from(\n                  { length: Math.ceil(filteredData.length / itemsPerPage) },\n                  (_, index) => {\n                    const pageIndex = index + 1\n                    const totalPages = Math.ceil(filteredData.length / itemsPerPage)\n\n                    // Display three consecutive pages centered around the current page\n                    if (\n                      (pageIndex >= currentPage - 1 && pageIndex <= currentPage + 1) ||\n                      totalPages <= 3 ||\n                      (currentPage === 1 && pageIndex <= 3) ||\n                      (currentPage === totalPages && pageIndex >= totalPages - 2)\n                    ) {\n                      return (\n                        <CPaginationItem\n                          key={pageIndex}\n                          active={pageIndex === currentPage}\n                          onClick={() => setCurrentPage(pageIndex)}\n                          style={{ cursor: 'pointer' }}\n                        >\n                          {pageIndex}\n                        </CPaginationItem>\n                      )\n                    }\n\n                    // Display ellipses for pages before the current page\n                    if (pageIndex === 1 && currentPage > 2) {\n                      return (\n                        <CPaginationItem key={pageIndex} disabled style={{ cursor: 'default' }}>\n                          ...\n                        </CPaginationItem>\n                      )\n                    }\n\n                    // Display ellipses for pages after the current page\n                    if (pageIndex === totalPages && currentPage < totalPages - 1) {\n                      return (\n                        <CPaginationItem key={pageIndex} disabled style={{ cursor: 'default' }}>\n                          ...\n                        </CPaginationItem>\n                      )\n                    }\n\n                    return null\n                  },\n                )}\n\n                <CPaginationItem\n                  onClick={() => !isDataEmpty && setCurrentPage(currentPage + 1)}\n                  disabled={\n                    currentPage === Math.ceil(filteredData.length / itemsPerPage) || isDataEmpty\n                  }\n                  style={{ cursor: isDataEmpty ? 'default' : 'pointer' }}\n                >\n                  Next\n                </CPaginationItem>\n              </CPagination>\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n      <CModal\n        backdrop=\"static\"\n        visible={visible}\n        className=\"modal\"\n        onClose={() => {\n          setVisible(false)\n        }}\n      >\n        <CModalHeader>\n          <CModalTitle id=\"VerticallyCenteredExample\">Data Roti</CModalTitle>\n        </CModalHeader>\n        <CModalBody>\n          <CTable striped bordered responsive>\n            <CTableHead>\n              <CTableRow>\n                <CTableHeaderCell>Nama Roti</CTableHeaderCell>\n                <CTableHeaderCell>Jumlah Roti</CTableHeaderCell>\n              </CTableRow>\n            </CTableHead>\n            <CTableBody>\n              {dataRoti.map((roti, index) => (\n                <CTableRow key={index}>\n                  <CTableDataCell>{roti.roti.nama_roti}</CTableDataCell>\n                  <CTableDataCell>{roti.jumlah_roti}</CTableDataCell>\n                </CTableRow>\n              ))}\n            </CTableBody>\n          </CTable>\n        </CModalBody>\n        <CModalFooter>\n          <CButton color=\"secondary\" onClick={() => setVisible(false)}>\n            Close\n          </CButton>\n        </CModalFooter>\n      </CModal>\n      <CModal\n        backdrop=\"static\"\n        visible={open}\n        className=\"modal\"\n        onClose={() => {\n          setOpen(false)\n        }}\n      >\n        <CModalHeader>\n          <CModalTitle id=\"VerticallyCenteredExample\">Preview Foto</CModalTitle>\n        </CModalHeader>\n        <CModalBody>\n          <img src={foto} alt=\"Preview\" style={{ maxWidth: '100%', height: 'auto' }} />\n        </CModalBody>\n        <CModalFooter>\n          <CButton color=\"secondary\" onClick={() => setOpen(false)}>\n            Close\n          </CButton>\n        </CModalFooter>\n      </CModal>\n    </div>\n  )\n}\n\nexport default DataPengiriman\n","export var cilSearch = [\"512 512\", \"<path fill='var(--ci-primary-color, currentColor)' d='M479.6,399.716l-81.084-81.084-62.368-25.767A175.014,175.014,0,0,0,368,192c0-97.047-78.953-176-176-176S16,94.953,16,192,94.953,368,192,368a175.034,175.034,0,0,0,101.619-32.377l25.7,62.2L400.4,478.911a56,56,0,1,0,79.2-79.195ZM48,192c0-79.4,64.6-144,144-144s144,64.6,144,144S271.4,336,192,336,48,271.4,48,192ZM456.971,456.284a24.028,24.028,0,0,1-33.942,0l-76.572-76.572-23.894-57.835L380.4,345.771l76.573,76.572A24.028,24.028,0,0,1,456.971,456.284Z' class='ci-primary'/>\"];\n"],"names":["DataPengiriman","searchText","setSearchText","useState","dataRoti","setDataRoti","visible","setVisible","open","setOpen","foto","setFoto","dataFoto","setDataFoto","kurir_id","setKurirId","dataTransaksi","setDataTransaksi","currentPage","setCurrentPage","itemsPerPage","setItemsPerPage","itemsPerPageOptions","length","useEffect","infoLogin","JSON","parse","localStorage","getItem","id","handleData","axios","get","then","response","console","log","data","catch","error","filteredData","filter","lapak","_lapak$lapak$nama_lap","_lapak$lapak$nama_lap2","lapakNameMatch","nama_lapak","toString","toLowerCase","includes","isStatus","status","isKurirMatch","id_kurir","startIndex","endIndex","paginatedData","slice","startRange","endRange","Math","min","isDataEmpty","_jsxs","children","_jsx","CRow","CCol","CCard","CCardHeader","CCardBody","CForm","className","md","xs","CInputGroup","CFormInput","type","placeholder","value","onChange","e","target","CButton","variant","CIcon","icon","cilSearch","CFormLabel","CFormSelect","handleItemsPerPageChange","parseInt","map","option","CTable","striped","bordered","responsive","CTableHead","CTableRow","CTableHeaderCell","CTableBody","colSpan","index","CTableDataCell","alamat_lapak","color","title","onClick","transaksi_roti","handleRotiClick","style","display","alignItems","size","accept","handleFoto","event","selectedFile","files","newDataFoto","disabled","width","reader","FileReader","onload","dataURL","result","readAsDataURL","handleFile","handleSubmit","formData","FormData","append","post","concat","id_transaksi","put","handleStatus","CPagination","activepage","pages","ceil","onActivePageChange","align","doublearrows","CPaginationItem","cursor","Array","from","_","pageIndex","totalPages","active","CModal","backdrop","onClose","CModalHeader","CModalTitle","CModalBody","roti","nama_roti","jumlah_roti","CModalFooter","src","alt","maxWidth","height"],"sourceRoot":""}